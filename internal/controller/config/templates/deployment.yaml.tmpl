apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Name}}
  namespace: {{.Namespace}}
  labels:
    app: {{.Name}}
    component: model-registry
    app.kubernetes.io/name: {{.Name}}
    app.kubernetes.io/instance: {{.Name}}
    app.kubernetes.io/component: model-registry
    app.kubernetes.io/created-by: model-registry-operator
    app.kubernetes.io/part-of: model-registry
    app.kubernetes.io/managed-by: model-registry-operator
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: {{.Name}}
      component: model-registry
  template:
    metadata:
      labels:
        app: {{.Name}}
        component: model-registry
        sidecar.istio.io/inject: "true"
      annotations:
        {{- if .Spec.Postgres}}
        traffic.sidecar.istio.io/excludeOutboundPorts: {{.Spec.Postgres.Port}}
        {{- else if .Spec.MySQL}}
        traffic.sidecar.istio.io/excludeOutboundPorts: {{.Spec.MySQL.Port}}
        {{- end}}
    spec:
      containers:
        - args:
            - --grpc_port={{.Spec.Grpc.Port}}
            {{- if .Spec.Postgres}}
            - --metadata_source_config_type=postgresql
            - --postgres_config_dbname={{.Spec.Postgres.Database}}
                {{- if .Spec.Postgres.Host}}
            - --postgres_config_host={{.Spec.Postgres.Host}}
                {{- end}}
                {{- if .Spec.Postgres.HostAddress}}
            - --postgres_config_hostaddr={{.Spec.Postgres.HostAddress}}
                {{- end}}
            - --postgres_config_port={{.Spec.Postgres.Port}}
            - --postgres_config_user={{.Spec.Postgres.Username}}
                {{- if .Spec.Postgres.PasswordSecret}}
            - --postgres_config_password=$(POSTGRES_PASSWORD)
                {{- end}}
            - --postgres_config_skip_db_creation={{.Spec.Postgres.SkipDBCreation}}
            - --postgres_config_sslmode={{.Spec.Postgres.SSLMode}}
                {{- if .Spec.Postgres.SSLCertificateSecret}}
            - --postgres_config_sslcert=/etc/postgres_ssl_cert/{{.Spec.Postgres.SSLCertificateSecret.Key}}
                {{- end}}
                {{- if .Spec.Postgres.SSLKeySecret}}
            - --postgres_config_sslkey=/etc/postgres_ssl_key/{{.Spec.Postgres.SSLKeySecret.Key}}
                {{- end}}
                {{- if .Spec.Postgres.SSLPasswordSecret}}
            - --postgres_config_sslpassword=${POSTGRES_SSLPASSWORD}
                {{- end}}
                {{- if .Spec.Postgres.SSLRootCertificateSecret}}
            - --postgres_config_sslrootcert=/etc/postgres_ssl_rootcert/{{.Spec.Postgres.SSLRootCertificateSecret.Key}}
                {{- end}}
            {{- else if .Spec.MySQL}}
            - --metadata_source_config_type=mysql
            - --mysql_config_database={{.Spec.MySQL.Database}}
                {{- if .Spec.MySQL.Host}}
            - --mysql_config_host={{.Spec.MySQL.Host}}
                {{- end}}
            - --mysql_config_port={{.Spec.MySQL.Port}}
            - --mysql_config_user={{.Spec.MySQL.Username}}
                {{- if .Spec.MySQL.PasswordSecret}}
            - --mysql_config_password=$(MYSQL_PASSWORD)
                {{- end}}
                {{- if .Spec.MySQL.SkipDBCreation}}
            - --mysql_config_skip_db_creation={{.Spec.MySQL.SkipDBCreation}}
                {{- end}}
                {{- if .Spec.MySQL.SSLCertificateSecret}}
            - --mysql_config_sslcert=/etc/mysql_ssl_cert/{{.Spec.MySQL.SSLCertificateSecret.Key}}
                {{- end}}
                {{- if .Spec.MySQL.SSLKeySecret}}
            - --mysql_config_sslkey=/etc/mysql_ssl_key/{{.Spec.MySQL.SSLKeySecret.Key}}
                {{- end}}
                {{- if .Spec.MySQL.SSLRootCertificateSecret}}
            - --mysql_config_sslrootcert=/etc/mysql_ssl_rootcert/{{.Spec.MySQL.SSLRootCertificateSecret.Key}}
                {{- end}}
                {{- if .Spec.MySQL.SSLRootCertificatesSecretName}}
            - --mysql_config_sslcapath=/etc/mysql_ssl_rootcerts/
                {{- end}}
                {{- if .Spec.MySQL.SSLCipher}}
            - --mysql_config_sslcipher={{.Spec.MySQL.SSLCipher}}
                {{- end}}
                {{- if .Spec.MySQL.VerifyServerCert}}
            - --mysql_config_verify_server_cert={{.Spec.MySQL.VerifyServerCert}}
                {{- end}}
            {{- end}}
            - --enable_database_upgrade=true
          command:
            - /bin/metadata_store_server
          env:
            {{- if .Spec.Postgres}}
                {{- if .Spec.Postgres.PasswordSecret}}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: "{{.Spec.Postgres.PasswordSecret.Key}}"
                  name: "{{.Spec.Postgres.PasswordSecret.Name}}"
                {{- end}}
                {{- if .Spec.Postgres.SSLPasswordSecret}}
            - name: POSTGRES_SSLPASSWORD
              valueFrom:
                secretKeyRef:
                  key: "{{.Spec.Postgres.SSLPasswordSecret.Key}}"
                  name: "{{.Spec.Postgres.SSLPasswordSecret.Name}}"
                {{- end}}
            {{- else if .Spec.MySQL}}
                {{- if .Spec.MySQL.PasswordSecret}}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: "{{.Spec.MySQL.PasswordSecret.Key}}"
                  name: "{{.Spec.MySQL.PasswordSecret.Name}}"
                {{- end}}
            {{- end}}
          volumeMounts:
            {{- if .Spec.Postgres}}
                {{- if .Spec.Postgres.SSLCertificateSecret}}
            - name: postgres-ssl-cert
              mountPath: /etc/postgres_ssl_cert
              readOnly: true
                {{- end}}
                {{- if .Spec.Postgres.SSLKeySecret}}
            - name: postgres-ssl-key
              mountPath: /etc/postgres_ssl_key
              readOnly: true
                {{- end}}
                {{- if .Spec.Postgres.SSLRootCertificateSecret}}
            - name: postgres-ssl-rootcert
              mountPath: /etc/postgres_ssl_rootcert
              readOnly: true
                {{- end}}
            {{- else if .Spec.MySQL}}
                {{- if .Spec.MySQL.SSLCertificateSecret}}
            - name: mysql-ssl-cert
              mountPath: /etc/mysql_ssl_cert
              readOnly: true
                {{- end}}
                {{- if .Spec.MySQL.SSLKeySecret}}
            - name: mysql-ssl-key
              mountPath: /etc/mysql_ssl_key
              readOnly: true
                {{- end}}
                {{- if .Spec.MySQL.SSLRootCertificateSecret}}
            - name: mysql-ssl-rootcert
              mountPath: /etc/mysql_ssl_rootcert
              readOnly: true
                {{- end}}
                {{- if .Spec.MySQL.SSLRootCertificatesSecretName}}
            - name: mysql-ssl-rootcerts
              mountPath: /etc/mysql_ssl_rootcerts
              readOnly: true
                {{- end}}
            {{- end}}
          image: {{.Spec.Grpc.Image}}
          name: grpc-container
          ports:
            - containerPort: {{.Spec.Grpc.Port}}
              name: grpc-api
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 5
            tcpSocket:
              port: grpc-api
            timeoutSeconds: 2
          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 5
            tcpSocket:
              port: grpc-api
            timeoutSeconds: 2
          resources:
            {{- if .Spec.Grpc.Resources.Requests }}
            requests:
              cpu: {{.Spec.Grpc.Resources.Requests.Cpu}}
              memory: {{.Spec.Grpc.Resources.Requests.Memory}}
            {{- end }}
            {{- if .Spec.Grpc.Resources.Limits }}
            limits:
              cpu: {{.Spec.Grpc.Resources.Limits.Cpu}}
              memory: {{.Spec.Grpc.Resources.Limits.Memory}}
            {{- end }}
        - args:
            - --hostname=0.0.0.0
            - --port={{.Spec.Rest.Port}}
            - --mlmd-hostname=localhost
            - --mlmd-port={{.Spec.Grpc.Port}}
          command:
            - /model-registry
            - proxy
          image: {{.Spec.Rest.Image}}
          name: rest-container
          ports:
            - containerPort: {{.Spec.Rest.Port}}
              name: http-api
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 5
            tcpSocket:
              port: http-api
            timeoutSeconds: 2
          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 5
            tcpSocket:
              port: http-api
            timeoutSeconds: 2
          resources:
            {{- if .Spec.Rest.Resources.Requests }}
            requests:
              cpu: {{.Spec.Rest.Resources.Requests.Cpu}}
              memory: {{.Spec.Rest.Resources.Requests.Memory}}
            {{- end }}
            {{- if .Spec.Rest.Resources.Limits }}
            limits:
              cpu: {{.Spec.Rest.Resources.Limits.Cpu}}
              memory: {{.Spec.Rest.Resources.Limits.Memory}}
            {{- end }}
      serviceAccountName: {{.Name}}
      volumes:
        {{- if .Spec.Postgres}}
            {{- if .Spec.Postgres.SSLCertificateSecret}}
        - name: postgres-ssl-cert
          secret:
            secretName: {{.Spec.Postgres.SSLCertificateSecret.Name}}
            defaultMode: 0600
            {{- end}}
            {{- if .Spec.Postgres.SSLKeySecret}}
        - name: postgres-ssl-key
          secret:
            secretName: {{.Spec.Postgres.SSLKeySecret.Name}}
            defaultMode: 0600
            {{- end}}
            {{- if .Spec.Postgres.SSLRootCertificateSecret}}
        - name: postgres-ssl-rootcert
          secret:
            secretName: {{.Spec.Postgres.SSLRootCertificateSecret.Name}}
            defaultMode: 0600
            {{- end}}
        {{- else if .Spec.MySQL}}
            {{- if .Spec.MySQL.SSLCertificateSecret}}
        - name: mysql-ssl-cert
          secret:
            secretName: {{.Spec.MySQL.SSLCertificateSecret.Name}}
            defaultMode: 0600
            {{- end}}
            {{- if .Spec.MySQL.SSLKeySecret}}
        - name: mysql-ssl-key
          secret:
            secretName: {{.Spec.MySQL.SSLKeySecret.Name}}
            defaultMode: 0600
            {{- end}}
            {{- if .Spec.MySQL.SSLRootCertificateSecret}}
        - name: mysql-ssl-rootcert
          secret:
            secretName: {{.Spec.MySQL.SSLRootCertificateSecret.Name}}
            defaultMode: 0600
            {{- end}}
            {{- if .Spec.MySQL.SSLRootCertificatesSecretName}}
        - name: mysql-ssl-rootcerts
          secret:
            secretName: {{.Spec.MySQL.SSLRootCertificatesSecretName}}
            defaultMode: 0600
            {{- end}}
        {{- end}}
